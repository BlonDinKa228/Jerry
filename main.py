import logging
import os
from dotenv import load_dotenv
from main2 import API_TOKEN
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters import Text
import time


# Configure logging
logging.basicConfig(level=logging.INFO)
PROXY_URL = "http://proxy.server:3123"
bot = Bot(token=os.environ.get("API_TOKEN"), proxy=PROXY_URL)
dp = Dispatcher(bot)

@dp.message_handler(commands=["start"])
async def start(message):
    await message.answer("–°–∞–ª–µ–º \n–Ø –î–∂–µ—Ä—Ä–∏"
                         "\n/help")

@dp.message_handler(commands=["help"])
async def help(message: types.Message):
    await message.answer("–≠—Ç–æ—Ç –±–æ—Ç - —ç–∫—Å–ø–µ—Ä–µ–º–µ–Ω—Ç \n–ò–≥—Ä–∞–π –∏ —Ä–∞–¥—É–π—Å—è "
                         "\n–í —Ä–µ–∂–∏–º–µ '–ü—Ä–æ—Ç–∏–≤ –î–∂–µ—Ä—Ä–∏', –∫—É–±–∏–∫ —Å–Ω–∞—á–∞–ª–∞ –∫–∏–¥–∞–µ—Ç –î–∂–µ—Ä—Ä–∏ –∞ –ø–æ—Ç–æ–º –≤—ã"
                         "\n/score - –æ—Ü–µ–Ω–∏—Ç—å"
                         "\n/game - –≤—ã–±—Ä–∞—Ç—å –∏–≥—Ä—É")

@dp.message_handler(commands=["score"])
async def score(message: types.Message):
    keyboard = InlineKeyboardMarkup(row_width=2)
    bt1 = InlineKeyboardButton(text="–î–∞",
                               callback_data="Yes")
    bt2 = InlineKeyboardButton(text="–ù–µ—Ç",
                               callback_data="No")
    keyboard.add(bt1,bt2)
    await bot.send_message(chat_id=message.from_user.id,
                           text="–ù—Ä–∞–≤–∏—Ç—Å—è –≤–∞–º –º–æ–π –±–æ—Ç?\n"
                              "(–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–ª–µ–≤–∞)",
                           reply_markup=keyboard)
    await message.delete()

@dp.callback_query_handler(text="Yes")
async def score_callback1(callback: types.CallbackQuery):
    await callback.answer("–ö—Ä–∞—Å–∞–≤–∞, —è –≤ —Ç–µ–±–µ –Ω–µ —Å–æ–º–Ω–µ–≤–∞–ª—Å—è")
@dp.callback_query_handler(text="No")
async def score_callback2(callback: types.CallbackQuery):
    await callback.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç")


@dp.message_handler(commands=["game"])
async def game(message: types.Message):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["–ö—É–±–∏–∫", "–ë–∞—Å–∫–µ—Ç", "–§—É—Ç–±–ª", "–î–∞—Ä—Ç—Å", "–ö–∞–∑–∏–∫"]
    kb.add(*buttons)
    await message.answer("–í –∫–∞–∫—É—é –∏–≥—Ä—É –±—É–¥–µ–º –∏–≥—Ä–∞—Ç—å?", reply_markup=kb)
    await message.delete()


@dp.message_handler(Text(equals="–ö–∞–∑–∏–∫"))
async def kasik(message: types.Message):
    keyboard = InlineKeyboardMarkup(row_width=2)
    bt1 = InlineKeyboardButton(text="–ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å 1 —à–∏–∫–æ–ª–∞–¥–∫—É",
                               callback_data="1")
    bt2 = InlineKeyboardButton(text="–Ø –∂–ª–æ–±–∞ –∞–±–æ—Å–∞–Ω–Ω–∞—è",
                               callback_data="lox")
    keyboard.add(bt1, bt2)
    await bot.send_message(chat_id=message.from_user.id,
                           text="–¢–∞–∫, —á—Ç–æ–±—ã –≤–æ–π—Ç–∏ –≤ –∫–∞–∑–∏–∫, –≤–∞–º –Ω—É–∂–Ω–æ –∑–∞–ø–ª–∞—Ç–∏—Ç—å",
                           reply_markup=keyboard)

@dp.callback_query_handler(text="1")
async def kasik_1(callback: types.CallbackQuery):
    await callback.answer(show_alert=True,
                          text="–ö–∞–∑–∏–∫ –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤, –Ω–æ –∑–∞ —á–æ–∫–æ–ª–∞–¥–∫—É —Å–ø–∞—Å–∏–±–æ")
@dp.callback_query_handler(text="lox")
async def kasik_2(callback: types.CallbackQuery):
    await callback.answer(text="–Ø —Ç–µ–±—è —É—Å–ª—ã—à–∞–ª")


@dp.message_handler(Text(equals="–î–∞—Ä—Ç—Å"))
async def darts(message: types.Message):
    await message.answer("–ü–æ–ø–∞–¥–∏ –≤ —Ü–µ–Ω—Ç—Ä!")
    v = (await message.answer_dice(emoji="üéØ"))
    g = v["dice"]["value"]
    time.sleep(3)
    if (g == 6):
        await bot.send_sticker(message.from_user.id, "CAACAgIAAxkBAAEIuPZkR7rToHRe3IFcb9-OEBa49WtEKAACPAADD0bMOl1i33t8q27_LwQ")
    elif (g == 2) or (g == 3):
        await message.answer("–°–ª–∞–±–µ–Ω—å–∫–æ")
    elif (g == 4) or (g == 5):
        await message.answer("–ü–æ—á—Ç–∏")
    else:
        await message.answer("–ù—É —Ç—ã –∏ –±–æ—Ç")
    await message.delete()


@dp.message_handler(Text(equals="–§—É—Ç–±–ª"))
async def footbl(message: types.Message):
    v = (await message.answer_dice(emoji="‚öΩ"))
    g = v["dice"]["value"]
    time.sleep(5)
    if(g == 3) or (g == 4) or (g == 5):
        await message.answer("–¢—ã –±–ª—é –ª–æ–∫?")
    else:
        await message.answer("–ü–æ–ø—É—â")
    await message.delete()


@dp.message_handler(Text(equals="–ë–∞—Å–∫–µ—Ç"))
async def basket(message: types.Message):
    v = (await message.answer_dice(emoji="üèÄ"))
    g = v["dice"]["value"]
    time.sleep(5)
    if(g == 4) or (g == 5):
        await message.answer("–ê—à–∞–ª–µ—Ç—å")
    elif (g == 3):
        await bot.send_sticker(message.from_user.id, "CAACAgIAAxkBAAEItOZkRpKZHD8KLjZzBN4xkUsBQKR1qQACUw8AAtu_eEgmaporXgF4Li8E")
    else:
        await message.answer("–ü–æ–ø—É—â")
    await message.delete()


@dp.message_handler(Text(equals="–ö—É–±–∏–∫"))
async def kub(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["–£–≥–∞–¥–∞–π","–ü—Ä–æ—Ç–∏–≤ –î–∂–µ—Ä—Ä–∏"]
    button = ("–ù–∞–∑–∞–¥")
    keyboard.add(*buttons).add(button)
    await bot.send_message(message.from_user.id,f"{message.from_user.username}, –ë—É–¥–µ—à—å —É–≥–∞–¥—ã–≤–∞—Ç—å –∏–ª–∏ –∏–≥—Ä–∞—Ç—å –ø—Ä–æ—Ç–∏–≤ –º–µ–Ω—è?",
                         reply_markup=keyboard)

@dp.message_handler(Text(equals="–ü—Ä–æ—Ç–∏–≤ –î–∂–µ—Ä—Ä–∏"))
async def vs(message: types.Message):
    await message.answer("–ö—Ä—É—Ç–∏—Ç–µ [–∫—É–±–∏–∫–∏]!")
    time.sleep(1)
    bot = (await message.answer_dice(emoji="üé≤"))
    bot = bot["dice"]["value"]
    time.sleep(5)
    user = (await message.answer_dice(emoji="üé≤"))
    user = user["dice"]["value"]
    time.sleep(5)
    if bot < user:
        await message.answer("–î–∂–µ—Ä—Ä–∏ –ø–æ–ø—É—â")
    elif bot > user:
        await message.answer(f"{message.from_user.username} –ø–æ–ø—É—â")
    else:
        await message.answer("–í—ã –≤—Å–µ –ø–æ–ø—É—â–∏!")

@dp.message_handler(Text(equals="–£–≥–∞–¥–∞–π"))
async def ugad(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["1", "2", "3", "4", '5', "6", "–ù–∞–∑–∞–¥"]
    keyboard.add(*buttons)
    await message.answer(text="–ö–∞–∫–æ–µ —á–∏—Å–ª–æ –∑–∞–≥–∞–¥–∞–ª–∏?",
                         reply_markup=keyboard)

@dp.message_handler(Text(equals="–ù–∞–∑–∞–¥"))
async def manu(message: types.Message):
    await message.answer(text="–û–∫",reply_markup=kb)

@dp.message_handler(content_types=["text"])
async def func(message: types.Message):
    if(message.text == "1"or"2"or"3"or"4"or'5'or"6"):
        v = (await message.answer_dice(emoji="üé≤"))
        g = v["dice"]["value"]
        time.sleep(4)
        if(g == int(message.text)):
            await message.answer("–≠–∫—Å—Ç—Ä–∞—Å–µ–∫—Å?")
        else:
            await message.answer("–õ–æ—à–Ω—è")
    else:
        await message.answer("Error")


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
